%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Wed Oct  2 15:43:00 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/cutpoint 30 def
/sequence { (\
GAUAGAUAGAUAGAUGAAAGAUAGAUAGAU GGGAUCUAUCUAUCUUUCAUCUAUCUAUCUAUCGUAAGAGGAGAGAUAGAAUGAUAGAUGAAAACCUGGCGGCAGCGCAAAAGGUGAGCAAGGGCGAGGAGGACAACAUGGCC\
) } def
/len { sequence length } bind def

/coor [
[93.35903931 108.75909424]
[78.55664062 111.18582153]
[63.75424194 113.61255646]
[48.95184708 116.03928375]
[34.14944839 118.46601105]
[19.34704971 120.89274597]
[4.54465199 123.31947327]
[-10.25774574 125.74620056]
[-25.06014442 128.17292786]
[-39.86254120 130.59967041]
[-54.66493988 133.02639771]
[-69.46733856 135.45312500]
[-84.26973724 137.87985229]
[-99.07213593 140.30657959]
[-113.87452698 142.73330688]
[-128.67692566 145.16004944]
[-143.47932434 147.58677673]
[-158.28172302 150.01350403]
[-173.08412170 152.44023132]
[-187.88652039 154.86695862]
[-202.68891907 157.29368591]
[-217.49131775 159.72042847]
[-232.29371643 162.14715576]
[-247.09611511 164.57388306]
[-261.89849854 167.00061035]
[-276.70089722 169.42733765]
[-291.50329590 171.85406494]
[-306.30569458 174.28080750]
[-321.10809326 176.70753479]
[-335.91049194 179.13426208]
[-348.24923706 189.93644714]
[-363.68429565 184.39645386]
[-366.33737183 168.21334839]
[-353.47924805 158.03491211]
[-338.33721924 164.33186340]
[-323.53482056 161.90513611]
[-308.73242188 159.47840881]
[-293.93002319 157.05168152]
[-279.12762451 154.62493896]
[-264.32522583 152.19821167]
[-249.52284241 149.77148438]
[-234.72044373 147.34475708]
[-219.91804504 144.91802979]
[-205.11564636 142.49128723]
[-190.31324768 140.06455994]
[-175.51084900 137.63783264]
[-160.70845032 135.21110535]
[-145.90605164 132.78437805]
[-131.10365295 130.35765076]
[-116.30126190 127.93091583]
[-101.49886322 125.50418854]
[-86.69646454 123.07745361]
[-71.89406586 120.65072632]
[-57.09167099 118.22399902]
[-42.28927231 115.79726410]
[-27.48687363 113.37053680]
[-12.68447590 110.94380188]
[2.11792207 108.51707458]
[16.92032051 106.09034729]
[31.72271729 103.66361237]
[46.52511597 101.23688507]
[61.32751465 98.81015778]
[76.12991333 96.38342285]
[90.93231201 93.95669556]
[76.06751251 91.94726562]
[62.04397202 86.62370300]
[49.59036255 78.26262665]
[39.35379028 67.29847717]
[31.86615181 54.30096817]
[27.51651382 39.94545746]
[26.53088570 24.97787476]
[28.96048355 10.17594719]
[34.67906189 -3.69120336]
[43.38948059 -15.90302658]
[54.63913345 -25.82498550]
[67.84348297 -32.94152832]
[82.31642151 -36.88286591]
[97.30590820 -37.44421387]
[112.03309631 -34.59639359]
[125.73272705 -28.48738670]
[137.69297791 -19.43461990]
[147.29235840 -7.90848398]
[154.03208923 5.49211216]
[157.56198120 20.07086182]
[157.69859314 35.07024002]
[154.43482971 49.71086502]
[147.94029236 63.23199463]
[138.55244446 74.93106842]
[126.75907135 84.20017242]
[113.17403412 90.55734253]
[128.02552795 88.45186615]
[135.35713196 74.90366364]
[149.09989929 68.34700012]
[163.89332581 71.10715485]
[174.10258484 81.91959381]
[188.95408630 79.81411743]
[203.80558777 77.70864868]
[218.65707397 75.60317230]
[233.86451721 62.44528580]
[251.50622559 70.25456238]
[266.25259399 67.50771332]
[280.99893188 64.76087189]
[293.10076904 53.69390106]
[308.65219116 58.89820862]
[311.65524292 75.02004242]
[299.02066040 85.47464752]
[283.74578857 79.50721741]
[268.99942017 82.25406647]
[254.25308228 85.00091553]
[249.19911194 93.98566437]
[239.81962585 98.76987457]
[229.14100647 97.53609467]
[220.76255798 90.45466614]
[205.91105652 92.56014252]
[191.05955505 94.66561890]
[176.20806885 96.77108765]
[169.40641785 109.99514008]
[155.96310425 116.75837708]
[140.93943787 114.27988434]
[130.13101196 103.30336761]
[115.27951050 105.40884399]
[111.83843231 112.07284546]
[104.95628357 125.40086365]
[101.51521301 132.06488037]
[108.39736176 145.39288330]
[115.27951050 158.72090149]
[130.36721802 157.06996155]
[145.03146362 160.98460388]
[157.28903198 169.93537903]
[165.48217773 182.71179199]
[168.50285339 197.58593750]
[165.94255066 212.54618835]
[158.14750671 225.56930542]
[146.17195129 234.89402771]
[131.63546753 239.25926208]
[116.50400543 238.07463074]
[102.82396698 231.50035095]
[92.44547272 220.42555237]
[86.77211761 206.34800720]
[86.57118225 191.17156982]
[91.86984253 176.94874573]
[101.95149231 165.60305786]
[95.06934357 152.27503967]
[88.18719482 138.94702148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[90 121]
[91 120]
[95 116]
[96 115]
[97 114]
[98 113]
[100 109]
[101 108]
[102 107]
[124 144]
[125 143]
[126 142]
] def

init

% Start Annotations
1 30 9  0 0.9 0.2 omark
32 144 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
