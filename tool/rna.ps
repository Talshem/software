%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Wed Oct  2 11:41:58 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/cutpoint 30 def
/sequence { (\
CCACCAUUACCACCACCAUCACCACCACCA GGGUGGUGGUGGUGAUGGUGGUGGUAAUGGUGGGAAAGAGGAGACCACCAAUGCCACCACCAAACCUGGCGGCAGCGCAAAAGCGUACGUUAUGCGUACGUUAUGCGUACGUU\
) } def
/len { sequence length } bind def

/coor [
[61.11908340 113.97431946]
[46.31668472 116.40105438]
[31.51428795 118.82778168]
[16.71188927 121.25450897]
[1.90949178 123.68124390]
[-12.89290619 126.10797119]
[-27.69530296 128.53469849]
[-42.49770355 130.96142578]
[-57.30009842 133.38816833]
[-72.10250092 135.81489563]
[-86.90489197 138.24162292]
[-101.70729065 140.66835022]
[-116.50968933 143.09507751]
[-131.31208801 145.52180481]
[-146.11448669 147.94854736]
[-160.91688538 150.37527466]
[-175.71928406 152.80200195]
[-190.52168274 155.22872925]
[-205.32408142 157.65545654]
[-220.12648010 160.08219910]
[-234.92887878 162.50892639]
[-249.73127747 164.93565369]
[-264.53366089 167.36238098]
[-279.33605957 169.78910828]
[-294.13845825 172.21583557]
[-308.94085693 174.64257812]
[-323.74325562 177.06930542]
[-338.54565430 179.49603271]
[-353.34805298 181.92276001]
[-368.15045166 184.34948730]
[-380.48919678 195.15168762]
[-395.92425537 189.61167908]
[-398.57733154 173.42857361]
[-385.71920776 163.25013733]
[-370.57717896 169.54708862]
[-355.77478027 167.12036133]
[-340.97238159 164.69363403]
[-326.16998291 162.26690674]
[-311.36758423 159.84017944]
[-296.56518555 157.41343689]
[-281.76278687 154.98670959]
[-266.96038818 152.55998230]
[-252.15800476 150.13325500]
[-237.35560608 147.70652771]
[-222.55320740 145.27980042]
[-207.75080872 142.85305786]
[-192.94841003 140.42633057]
[-178.14601135 137.99960327]
[-163.34361267 135.57287598]
[-148.54121399 133.14614868]
[-133.73881531 130.71942139]
[-118.93642426 128.29267883]
[-104.13402557 125.86595154]
[-89.33162689 123.43922424]
[-74.52922821 121.01249695]
[-59.72682953 118.58576202]
[-44.92443085 116.15903473]
[-30.12203407 113.73230743]
[-15.31963634 111.30557251]
[-0.51723814 108.87884521]
[14.28516006 106.45211792]
[29.08755684 104.02538300]
[43.88995361 101.59865570]
[58.69235229 99.17192841]
[59.81075668 90.41709137]
[62.76316452 82.09957123]
[67.41484833 74.59891510]
[73.55352020 68.25742340]
[80.89906311 63.36447525]
[89.11626434 60.14336014]
[97.83013153 58.74107361]
[99.77459717 43.86763763]
[89.94474792 31.49227524]
[91.82768250 15.80055332]
[104.30628204 6.10209417]
[119.97721863 8.15082169]
[129.54319763 20.73126221]
[127.32890320 36.37966156]
[114.64803314 45.81210327]
[112.70356750 60.68553925]
[123.32332611 64.10641479]
[132.98190308 70.43178558]
[140.87881470 79.37948608]
[152.91784668 70.43177032]
[164.95687866 61.48404694]
[176.99591064 52.53632736]
[183.45654297 38.09434509]
[198.28688049 36.71231461]
[210.32591248 27.76459312]
[222.36494446 18.81687164]
[223.10604858 3.19685984]
[233.75202942 -8.25726700]
[249.27619934 -10.13721943]
[262.34851074 -1.55534172]
[266.79663086 13.43626595]
[260.52026367 27.75902557]
[246.48295593 34.65016556]
[231.31266785 30.85590363]
[219.27363586 39.80362701]
[207.23460388 48.75134659]
[201.63508606 62.55332565]
[185.94361877 64.57535553]
[173.90458679 73.52307892]
[161.86555481 82.47080231]
[149.82652283 91.41851807]
[150.15148926 106.41500092]
[162.56683350 114.83280945]
[174.98216248 123.25061035]
[187.39750671 131.66841125]
[199.81283569 140.08622742]
[212.65303040 138.43022156]
[222.83534241 145.75756836]
[225.18719482 157.67054749]
[237.41725159 166.35534668]
[249.64729309 175.04014587]
[261.87734985 183.72494507]
[274.10742188 192.40975952]
[286.33746338 201.09455872]
[298.56750488 209.77935791]
[310.79757690 218.46415710]
[323.02761841 227.14895630]
[339.44259644 231.38980103]
[339.91162109 248.33726501]
[323.75628662 253.47946167]
[314.34283447 239.37901306]
[302.11276245 230.69421387]
[289.88272095 222.00941467]
[277.65264893 213.32461548]
[265.42260742 204.63980103]
[253.19255066 195.95500183]
[240.96249390 187.27020264]
[228.73243713 178.58540344]
[216.50239563 169.90060425]
[198.99765015 169.23533630]
[191.39503479 152.50155640]
[178.97969055 144.08375549]
[166.56436157 135.66595459]
[154.14903259 127.24813843]
[141.73368835 118.83033752]
[132.63641357 131.19439697]
[120.11859131 139.70172119]
[105.69007874 143.49922180]
[91.03504944 142.29158020]
[77.81555939 136.35935974]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[71 80]
[72 79]
[83 105]
[84 104]
[85 103]
[86 102]
[88 100]
[89 99]
[90 98]
[106 139]
[107 138]
[108 137]
[109 136]
[110 135]
[113 133]
[114 132]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% Start Annotations
1 30 9  0 0.9 0.2 omark
32 144 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
