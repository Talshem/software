%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Tue Oct  1 22:40:09 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/cutpoint 30 def
/sequence { (\
CGUUAUGCGUACGUUAUGCGUACGUUAUGC GGGGCAUAACGUACGCAUAACGUACGCAUAACGGAAAGAGGAGACGUUAUAUGUACGUUAUGAACCUGGCGGCAGCGCAAAAGCGUACGUUAUGCGUACGUUAUGCGUACGUU\
) } def
/len { sequence length } bind def

/coor [
[72.36167145 112.13119507]
[57.55926895 114.55792236]
[42.75687408 116.98465729]
[27.95447540 119.41138458]
[13.15207672 121.83811188]
[-1.65032113 124.26484680]
[-16.45271873 126.69157410]
[-31.25511742 129.11830139]
[-46.05751419 131.54502869]
[-60.85991287 133.97177124]
[-75.66230774 136.39849854]
[-90.46470642 138.82522583]
[-105.26710510 141.25195312]
[-120.06950378 143.67868042]
[-134.87190247 146.10540771]
[-149.67430115 148.53215027]
[-164.47669983 150.95887756]
[-179.27909851 153.38560486]
[-194.08149719 155.81233215]
[-208.88389587 158.23905945]
[-223.68629456 160.66578674]
[-238.48869324 163.09252930]
[-253.29109192 165.51925659]
[-268.09347534 167.94598389]
[-282.89587402 170.37271118]
[-297.69827271 172.79943848]
[-312.50067139 175.22616577]
[-327.30307007 177.65290833]
[-342.10546875 180.07963562]
[-356.90786743 182.50636292]
[-369.24661255 193.30854797]
[-384.68167114 187.76855469]
[-387.33474731 171.58544922]
[-374.47662354 161.40701294]
[-359.33459473 167.70396423]
[-344.53219604 165.27723694]
[-329.72979736 162.85050964]
[-314.92739868 160.42378235]
[-300.12500000 157.99703979]
[-285.32260132 155.57031250]
[-270.52020264 153.14358521]
[-255.71781921 150.71685791]
[-240.91542053 148.29013062]
[-226.11302185 145.86338806]
[-211.31062317 143.43666077]
[-196.50822449 141.00993347]
[-181.70582581 138.58320618]
[-166.90342712 136.15647888]
[-152.10102844 133.72975159]
[-137.29862976 131.30300903]
[-122.49623108 128.87628174]
[-107.69383240 126.44955444]
[-92.89144135 124.02282715]
[-78.08904266 121.59609985]
[-63.28664398 119.16936493]
[-48.48424530 116.74263763]
[-33.68184662 114.31590271]
[-18.87944984 111.88917542]
[-4.07705116 109.46244812]
[10.72534657 107.03571320]
[25.52774429 104.60898590]
[40.33014297 102.18225861]
[55.13254166 99.75552368]
[69.93493652 97.32879639]
[71.93449402 88.89276886]
[76.24957275 81.37313080]
[82.52415466 75.39028168]
[90.24057007 71.43784332]
[98.76217651 69.84189606]
[107.38591003 70.73412323]
[114.55519104 57.55833435]
[121.72447205 44.38254166]
[119.34826660 22.13843346]
[138.01358032 11.23409843]
[144.01550293 -2.51278782]
[150.01742554 -16.25967407]
[156.01934814 -30.00655937]
[162.02128601 -43.75344467]
[154.90330505 -57.67711639]
[158.45095825 -72.90695953]
[170.98913574 -82.25191498]
[186.59768677 -81.29958344]
[197.90675354 -70.49961853]
[199.57652283 -54.95143509]
[190.81857300 -41.99641418]
[175.76817322 -37.75151825]
[169.76623535 -24.00463486]
[163.76431274 -10.25774765]
[157.76239014 3.48913860]
[151.76046753 17.23602486]
[156.22058105 23.92556190]
[157.64732361 31.93404770]
[155.72776794 39.93613815]
[150.70925903 46.57670975]
[143.37023926 50.70030212]
[134.90025330 51.55182266]
[127.73097992 64.72761536]
[120.56169891 77.90340424]
[129.16906738 92.24059296]
[128.82308960 108.95950317]
[141.59141541 116.83158875]
[154.35975647 124.70367432]
[164.87173462 121.56629944]
[175.15193176 124.70841217]
[181.83354187 132.84593201]
[182.87023926 143.10232544]
[195.28556824 151.52014160]
[207.70091248 159.93794250]
[220.11624146 168.35574341]
[232.53158569 176.77355957]
[245.37176514 175.11755371]
[255.55409241 182.44490051]
[257.90594482 194.35787964]
[270.13598633 203.04267883]
[282.36602783 211.72747803]
[294.59609985 220.41227722]
[306.82614136 229.09707642]
[319.05621338 237.78189087]
[331.28625488 246.46669006]
[343.51629639 255.15148926]
[355.74636841 263.83630371]
[372.16134644 268.07714844]
[372.63034058 285.02459717]
[356.47503662 290.16680908]
[347.06155396 276.06634521]
[334.83151245 267.38153076]
[322.60147095 258.69674683]
[310.37139893 250.01193237]
[298.14135742 241.32713318]
[285.91128540 232.64233398]
[273.68124390 223.95753479]
[261.45117188 215.27273560]
[249.22113037 206.58793640]
[231.71638489 205.92266846]
[224.11376953 189.18888855]
[211.69844055 180.77108765]
[199.28309631 172.35327148]
[186.86776733 163.93547058]
[174.45243835 155.51766968]
[155.15980530 155.61560059]
[146.48765564 137.47200012]
[133.71932983 129.59991455]
[120.95100403 121.72783661]
[103.78515625 129.94522095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[70 98]
[71 97]
[72 96]
[74 90]
[75 89]
[76 88]
[77 87]
[78 86]
[100 143]
[101 142]
[102 141]
[106 139]
[107 138]
[108 137]
[109 136]
[110 135]
[113 133]
[114 132]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% Start Annotations
1 30 9  0 0.9 0.2 omark
32 144 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
