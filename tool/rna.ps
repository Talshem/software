%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Wed Oct  2 22:56:06 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/cutpoint 23 def
/sequence { (\
UGGUCAAAUUAACUUCAAUCGCC GGCGAUUGAGGUUGAUUUGAUUAGCACAACAAAAAUAAUUAAAUCAAUCUGACCAAAAUGGUGAGCAAGGGCGAGGAGGACAACAUGGCCAUCAUCAAGGAGUUCAUGCG\
) } def
/len { sequence length } bind def

/coor [
[-67.45495605 203.30061340]
[-80.93686676 209.87617493]
[-94.41877747 216.45175171]
[-107.90068817 223.02731323]
[-121.38259888 229.60287476]
[-134.86451721 236.17845154]
[-148.34642029 242.75401306]
[-161.82833862 249.32957458]
[-175.31024170 255.90515137]
[-188.79216003 262.48071289]
[-202.27406311 269.05627441]
[-215.75598145 275.63183594]
[-229.23788452 282.20742798]
[-242.71980286 288.78298950]
[-256.20172119 295.35855103]
[-269.68362427 301.93411255]
[-283.16552734 308.50967407]
[-296.64743042 315.08526611]
[-310.12936401 321.66082764]
[-323.61126709 328.23638916]
[-337.09317017 334.81195068]
[-350.57507324 341.38751221]
[-362.16064453 353.76535034]
[-377.26196289 346.05908203]
[-374.03732300 329.41461182]
[-357.15063477 327.90560913]
[-343.66873169 321.33004761]
[-330.18682861 314.75448608]
[-316.70492554 308.17889404]
[-303.22299194 301.60333252]
[-289.74108887 295.02777100]
[-276.25918579 288.45220947]
[-262.77728271 281.87664795]
[-249.29536438 275.30108643]
[-235.81344604 268.72549438]
[-222.33154297 262.14993286]
[-208.84962463 255.57437134]
[-195.36772156 248.99880981]
[-181.88580322 242.42323303]
[-168.40390015 235.84767151]
[-154.92198181 229.27210999]
[-141.44007874 222.69653320]
[-127.95816803 216.12097168]
[-114.47625732 209.54539490]
[-100.99434662 202.96983337]
[-87.51243591 196.39427185]
[-74.03052521 189.81869507]
[-60.70527267 182.93119812]
[-47.54389191 175.73550415]
[-34.38250732 168.53981018]
[-26.13420868 153.09440613]
[-7.76842022 153.55987549]
[5.22196054 146.05987549]
[18.21234131 138.55987549]
[13.77870178 127.23917389]
[10.90385628 115.42601776]
[9.63978004 103.33396912]
[10.00932503 91.18165588]
[12.00581169 79.18875885]
[15.59314537 67.57211304]
[20.70647049 56.54173279]
[27.25334358 46.29703140]
[35.11540222 37.02322769]
[44.15050888 28.88798141]
[54.19532013 22.03836823]
[65.06822968 16.59822273]
[76.57267761 12.66589832]
[88.50066376 10.31248665]
[100.63655090 9.58053493]
[112.76092529 10.48327732]
[124.65459442 13.00439167]
[136.10253906 17.09829903]
[146.89778137 22.69098663]
[155.71455383 10.55573273]
[157.56648254 -5.15671253]
[171.30699158 -10.90542030]
[180.12377930 -23.04067612]
[188.94055176 -35.17593002]
[197.75732422 -47.31118393]
[202.17575073 -63.67926025]
[219.12728882 -63.96465302]
[224.09419250 -47.75458527]
[209.89259338 -38.49440765]
[201.07580566 -26.35915184]
[192.25903320 -14.22389698]
[183.44224548 -2.08864188]
[182.22094727 12.75580788]
[167.84980774 19.37251091]
[159.03303528 31.50776672]
[170.39125061 43.24476624]
[179.45277405 56.83355331]
[185.92193604 71.83076477]
[189.58766174 87.74706268]
[190.33036804 104.06315613]
[205.20767212 105.97777557]
[220.08497620 107.89240265]
[227.30366516 94.54119110]
[238.86045837 84.70222473]
[253.19236755 79.70614624]
[268.36111450 80.22863007]
[282.31530762 86.19902039]
[293.16769409 96.80987549]
[299.45059204 110.62615204]
[300.31430054 125.77931213]
[295.64202881 140.22003174]
[286.06564331 151.99530029]
[272.88024902 159.51263428]
[257.86911011 161.75534058]
[243.06231689 158.42015076]
[230.46238708 149.95809937]
[221.77336121 137.51361084]
[218.17034912 122.76970673]
[203.29304504 120.85507965]
[188.41574097 118.94046021]
[183.11781311 135.60217285]
[174.71232605 150.93283081]
[163.51354980 164.35925293]
[149.94018555 175.37945557]
[134.49971008 183.58143616]
[117.76936340 188.65852356]
[100.37467957 190.42092896]
[82.96598816 188.80274963]
[66.19415283 183.86447144]
[50.68622208 175.79074097]
[37.02199554 164.88340759]
[25.71234131 151.55024719]
[12.72196102 159.05024719]
[-0.26842028 166.55024719]
[-4.38512993 178.83689880]
[-15.43464088 184.80004883]
[-27.18681335 181.70118713]
[-40.34819412 188.89688110]
[-53.50957489 196.09259033]
[-57.35211945 201.65443420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 47]
[2 46]
[3 45]
[4 44]
[5 43]
[6 42]
[7 41]
[8 40]
[9 39]
[10 38]
[11 37]
[12 36]
[13 35]
[14 34]
[15 33]
[16 32]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[22 26]
[48 133]
[49 132]
[50 131]
[52 128]
[53 127]
[54 126]
[73 89]
[74 88]
[76 86]
[77 85]
[78 84]
[79 83]
[94 114]
[95 113]
[96 112]
] def

init

% Start Annotations
1 23 9  0 0.9 0.2 omark
25 134 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
