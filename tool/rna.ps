%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Thu Oct 10 13:48:30 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/cutpoint 30 def
/sequence { (\
GCUUUACCCAAUAUCAGCGAUGCCGAACGU GGGACGUUCGGCAUCGCUGAUAUUGGGUAAAGCGAAAGAGGAGAGCUUUAAUGAAUAUCAGCAACCUGGCGGCAGCGCAAAAGGUGAGCAAGGGCGAGGAGGACAACAUGGCC\
) } def
/len { sequence length } bind def

/coor [
[69.26652527 112.63861847]
[54.46413040 115.06534576]
[39.66173172 117.49207306]
[24.85933495 119.91880798]
[10.05693722 122.34553528]
[-4.74546003 124.77227020]
[-19.54785728 127.19899750]
[-34.35025406 129.62573242]
[-49.15265274 132.05245972]
[-63.95505142 134.47918701]
[-78.75744629 136.90591431]
[-93.55984497 139.33264160]
[-108.36224365 141.75936890]
[-123.16464233 144.18611145]
[-137.96704102 146.61283875]
[-152.76943970 149.03956604]
[-167.57183838 151.46629333]
[-182.37423706 153.89302063]
[-197.17663574 156.31976318]
[-211.97903442 158.74649048]
[-226.78143311 161.17321777]
[-241.58383179 163.59994507]
[-256.38623047 166.02667236]
[-271.18862915 168.45339966]
[-285.99102783 170.88014221]
[-300.79342651 173.30686951]
[-315.59582520 175.73359680]
[-330.39822388 178.16032410]
[-345.20062256 180.58705139]
[-360.00302124 183.01377869]
[-372.34176636 193.81597900]
[-387.77679443 188.27598572]
[-390.42987061 172.09286499]
[-377.57174683 161.91444397]
[-362.42974854 168.21138000]
[-347.62734985 165.78465271]
[-332.82495117 163.35792542]
[-318.02255249 160.93119812]
[-303.22015381 158.50447083]
[-288.41775513 156.07774353]
[-273.61535645 153.65100098]
[-258.81295776 151.22427368]
[-244.01055908 148.79754639]
[-229.20816040 146.37081909]
[-214.40576172 143.94409180]
[-199.60336304 141.51736450]
[-184.80096436 139.09062195]
[-169.99856567 136.66389465]
[-155.19616699 134.23716736]
[-140.39376831 131.81044006]
[-125.59136963 129.38371277]
[-110.78897858 126.95697784]
[-95.98657990 124.53025055]
[-81.18418121 122.10351562]
[-66.38178253 119.67678833]
[-51.57938385 117.25006104]
[-36.77698517 114.82332611]
[-21.97458839 112.39659882]
[-7.17219019 109.96987152]
[7.63020754 107.54313660]
[22.43260574 105.11640930]
[37.23500443 102.68968201]
[52.03740311 100.26294708]
[66.83979797 97.83621979]
[68.18362427 84.13022614]
[75.29244232 71.28902435]
[87.61832428 61.75172043]
[103.58703613 57.62519455]
[104.56133270 42.65687180]
[105.53562164 27.68854523]
[106.50991058 12.72022057]
[97.04975891 -0.23682852]
[101.42049408 -15.67302704]
[116.26926422 -21.74704552]
[130.20535278 -13.79941654]
[132.53820801 2.07311964]
[121.47823334 13.69451046]
[120.50394440 28.66283607]
[119.52965546 43.63116074]
[118.55536652 58.59948730]
[124.00032806 63.75723267]
[132.03155518 51.08839035]
[140.06275940 38.41954803]
[145.06582642 24.27849960]
[158.66802979 17.95551491]
[172.70397949 23.24627686]
[178.74790955 36.97474670]
[173.17166138 50.89974213]
[159.32118225 56.66209030]
[147.10572815 65.36740875]
[134.89025879 74.07272339]
[140.33523560 79.23046875]
[155.22885132 77.44724274]
[169.66166687 66.06685638]
[185.52046204 73.50710297]
[200.37196350 71.40162659]
[215.22344971 69.29615021]
[230.07495117 67.19067383]
[245.28239441 54.03279114]
[262.92410278 61.84207153]
[277.67044067 59.09522247]
[292.41680908 56.34837723]
[304.51861572 45.28140640]
[320.07006836 50.48571396]
[323.07312012 66.60755157]
[310.43853760 77.06215668]
[295.16363525 71.09472656]
[280.41729736 73.84157562]
[265.67095947 76.58841705]
[260.61697388 85.57317352]
[251.23750305 90.35737610]
[240.55886841 89.12359619]
[232.18043518 82.04217529]
[217.32893372 84.14765167]
[202.47743225 86.25312042]
[187.62593079 88.35859680]
[180.07044983 97.86463928]
[167.66123962 99.70348358]
[157.01208496 92.34086609]
[142.11845398 94.12409210]
[139.94758606 104.51965332]
[135.39761353 113.48303223]
[129.03576660 120.51964569]
[121.51720428 125.32372284]
[128.39935303 138.65173340]
[135.28150940 151.97975159]
[150.36920166 150.32881165]
[165.03344727 154.24345398]
[177.29101562 163.19422913]
[185.48417664 175.97064209]
[188.50485229 190.84478760]
[185.94453430 205.80503845]
[178.14949036 218.82815552]
[166.17393494 228.15287781]
[151.63745117 232.51811218]
[136.50599670 231.33348083]
[122.82596588 224.75920105]
[112.44746399 213.68440247]
[106.77410889 199.60684204]
[106.57317352 184.43041992]
[111.87183380 170.20759583]
[121.95348358 158.86190796]
[115.07133484 145.53388977]
[108.18918610 132.20587158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[68 80]
[69 79]
[70 78]
[71 77]
[92 120]
[93 119]
[95 116]
[96 115]
[97 114]
[98 113]
[100 109]
[101 108]
[102 107]
[124 144]
[125 143]
[126 142]
] def

init

% Start Annotations
1 30 9  0 0.9 0.2 omark
32 144 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
