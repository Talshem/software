%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Tue Oct  8 21:27:17 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/cutpoint 30 def
/sequence { (\
AUGCUUUACCCAAUAUCAGCGAUGCCGAAC GGGGUUCGGCAUCGCUGAUAUUGGGUAAAGCAUGAAAGAGGAGAAUGCUUAUGCCAAUAUCAAACCUGGCGGCAGCGCAAAAGGUGAGCAAGGGCGAGGAGGACAACAUGGCC\
) } def
/len { sequence length } bind def

/coor [
[-88.61424255 135.92265320]
[-103.41664124 138.34938049]
[-118.21903992 140.77610779]
[-133.02143860 143.20283508]
[-147.82383728 145.62957764]
[-162.62623596 148.05630493]
[-177.42863464 150.48303223]
[-192.23103333 152.90975952]
[-207.03341675 155.33648682]
[-221.83581543 157.76321411]
[-236.63821411 160.18995667]
[-251.44061279 162.61668396]
[-266.24301147 165.04341125]
[-281.04541016 167.47013855]
[-295.84780884 169.89686584]
[-310.65020752 172.32359314]
[-325.45260620 174.75033569]
[-340.25500488 177.17706299]
[-355.05740356 179.60379028]
[-369.85980225 182.03051758]
[-384.66220093 184.45724487]
[-399.46459961 186.88398743]
[-414.26699829 189.31071472]
[-429.06939697 191.73744202]
[-443.87179565 194.16416931]
[-458.67419434 196.59089661]
[-473.47659302 199.01762390]
[-488.27899170 201.44436646]
[-503.08139038 203.87109375]
[-517.88378906 206.29782104]
[-530.22253418 217.10000610]
[-545.65759277 211.56001282]
[-548.31066895 195.37690735]
[-535.45251465 185.19847107]
[-520.31048584 191.49542236]
[-505.50811768 189.06869507]
[-490.70571899 186.64196777]
[-475.90332031 184.21522522]
[-461.10092163 181.78849792]
[-446.29852295 179.36177063]
[-431.49612427 176.93504333]
[-416.69372559 174.50831604]
[-401.89132690 172.08158875]
[-387.08892822 169.65484619]
[-372.28652954 167.22811890]
[-357.48413086 164.80139160]
[-342.68173218 162.37466431]
[-327.87933350 159.94793701]
[-313.07693481 157.52120972]
[-298.27453613 155.09446716]
[-283.47213745 152.66773987]
[-268.66973877 150.24101257]
[-253.86734009 147.81428528]
[-239.06495667 145.38755798]
[-224.26255798 142.96081543]
[-209.46015930 140.53408813]
[-194.65776062 138.10736084]
[-179.85536194 135.68063354]
[-165.05296326 133.25390625]
[-150.25056458 130.82717896]
[-135.44816589 128.40043640]
[-120.64576721 125.97371674]
[-105.84336853 123.54698181]
[-91.04096985 121.12025452]
[-90.51560974 106.55407715]
[-87.14294434 92.36888123]
[-81.05202484 79.11592102]
[-72.47759247 67.31064606]
[-61.75101471 57.41259003]
[-49.28747940 49.80754471]
[-35.56993103 44.79248047]
[-21.13035583 42.56397247]
[-6.52915049 43.21047974]
[7.66663265 46.70885468]
[20.90529823 52.92514801]
[32.67195511 61.61975479]
[42.50854111 72.45662689]
[50.03165054 85.01628876]
[54.94747925 98.81203461]
[69.79898071 96.70655823]
[84.65047455 94.60108185]
[97.54168701 83.91544342]
[113.03615570 90.26271057]
[127.83855438 87.83598328]
[142.64096069 85.40924835]
[157.44334412 82.98252106]
[159.78636169 68.80907440]
[166.39190674 56.07620621]
[176.59925842 46.02866364]
[189.39628601 39.64403152]
[203.51988220 37.53762436]
[217.58059692 39.90320587]
[230.19931030 46.49526215]
[240.14251709 56.65439606]
[246.44291687 69.37326050]
[261.29440308 67.26778412]
[276.14590454 65.16230774]
[290.99740601 63.05683517]
[306.20483398 49.89895248]
[323.84655762 57.70822906]
[338.59289551 54.96138382]
[353.33926392 52.21453857]
[365.44107056 41.14756775]
[380.99252319 46.35187531]
[383.99557495 62.47371292]
[371.36096191 72.92831421]
[356.08609009 66.96088409]
[341.33975220 69.70773315]
[326.59338379 72.45458221]
[321.53942871 81.43933105]
[312.15994263 86.22353363]
[301.48132324 84.98976135]
[293.10287476 77.90833282]
[278.25137329 80.01380920]
[263.39987183 82.11928558]
[248.54838562 84.22475433]
[245.50167847 99.63700104]
[237.35908508 113.10398102]
[225.08479309 122.99571991]
[210.14433289 128.10765076]
[194.32962036 127.80735779]
[179.54405212 122.11267853]
[167.57336426 111.69180298]
[159.87008667 97.78491974]
[145.06768799 100.21164703]
[130.26528931 102.63838196]
[115.46289062 105.06510925]
[108.07347107 114.12711334]
[96.51480865 115.89369965]
[86.75595093 109.45258331]
[71.90444946 111.55805969]
[57.05295563 113.66352844]
[56.03081512 129.08848572]
[51.84131622 143.96289062]
[44.66795731 157.64384460]
[34.82315063 169.54052734]
[22.73462677 179.13975525]
[8.92683029 186.02801514]
[-6.00181341 189.90940857]
[-21.40484238 190.61825562]
[-36.61575317 188.12620544]
[-50.97682953 182.54339600]
[-63.86759949 174.11352539]
[-74.73162842 163.20326233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[79 132]
[80 131]
[81 130]
[83 127]
[84 126]
[85 125]
[86 124]
[95 116]
[96 115]
[97 114]
[98 113]
[100 109]
[101 108]
[102 107]
] def

init

% Start Annotations
1 30 9  0 0.9 0.2 omark
32 144 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
