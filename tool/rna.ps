%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Wed Oct  2 13:02:25 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/cutpoint 30 def
/sequence { (\
AAAAAAAAAAAAAAAAAAAAAAAAAAAAGG GGGCCUUUUUUUUUUUUUUUUUUUUUUUUUUUUCGCAGAGGAGAAAAAAAAUGAAAAAAAAAAACCUGGCGGCAGCGCAAAAGCGUACGUUAUGCGUACGUUAUGCGUACGUU\
) } def
/len { sequence length } bind def

/coor [
[90.05970764 107.72138977]
[75.25730896 110.14811707]
[60.45491028 112.57484436]
[45.65251160 115.00157928]
[30.85011482 117.42830658]
[16.04771614 119.85503387]
[1.24531877 122.28176880]
[-13.55707932 124.70849609]
[-28.35947609 127.13522339]
[-43.16187286 129.56195068]
[-57.96427155 131.98867798]
[-72.76667023 134.41542053]
[-87.56906891 136.84214783]
[-102.37146759 139.26887512]
[-117.17386627 141.69560242]
[-131.97625732 144.12232971]
[-146.77865601 146.54907227]
[-161.58105469 148.97579956]
[-176.38345337 151.40252686]
[-191.18585205 153.82925415]
[-205.98825073 156.25598145]
[-220.79064941 158.68270874]
[-235.59304810 161.10945129]
[-250.39544678 163.53617859]
[-265.19784546 165.96290588]
[-280.00024414 168.38963318]
[-294.80264282 170.81636047]
[-309.60504150 173.24308777]
[-324.40744019 175.66983032]
[-339.20983887 178.09655762]
[-351.54858398 188.89874268]
[-366.98361206 183.35874939]
[-369.63671875 167.17562866]
[-356.77856445 156.99720764]
[-341.63656616 163.29415894]
[-326.83416748 160.86743164]
[-312.03176880 158.44070435]
[-297.22937012 156.01396179]
[-282.42697144 153.58723450]
[-267.62457275 151.16050720]
[-252.82217407 148.73377991]
[-238.01977539 146.30705261]
[-223.21737671 143.88031006]
[-208.41497803 141.45358276]
[-193.61257935 139.02685547]
[-178.81018066 136.60012817]
[-164.00778198 134.17340088]
[-149.20538330 131.74667358]
[-134.40298462 129.31993103]
[-119.60059357 126.89320374]
[-104.79819489 124.46647644]
[-89.99579620 122.03974915]
[-75.19339752 119.61301422]
[-60.39100266 117.18628693]
[-45.58860397 114.75955963]
[-30.78620720 112.33282471]
[-15.98380852 109.90609741]
[-1.18141115 107.47937012]
[13.62098694 105.05263519]
[28.42338371 102.62590790]
[43.22578049 100.19918060]
[58.02817917 97.77244568]
[72.83058167 95.34571838]
[87.63297272 92.91899109]
[99.76823425 84.10221100]
[106.65038300 70.77419281]
[113.53253174 57.44617844]
[110.36180878 44.89391708]
[116.42669678 33.91271210]
[127.97559357 30.16130638]
[135.14488220 16.98551559]
[142.31414795 3.80972624]
[131.26914978 -6.45958233]
[123.12570953 -19.15348816]
[118.39574432 -33.47403717]
[117.37657166 -48.52103424]
[120.13226318 -63.34860992]
[126.48959351 -77.02468872]
[136.04893494 -88.68958282]
[148.20939636 -97.61002350]
[162.20652771 -103.22527313]
[177.16047668 -105.18234253]
[192.13122559 -103.35820770]
[206.17770386 -97.86754608]
[218.41693115 -89.05549622]
[228.07954407 -77.47599792]
[234.55813599 -63.85694504]
[237.44544983 -49.05443954]
[236.56001282 -33.99898148]
[231.95745850 -19.63696861]
[223.92712402 -6.87121296]
[212.97380066 3.49582267]
[199.78601074 10.81245708]
[185.19276428 14.61876011]
[170.11140442 14.67546368]
[155.48994446 10.97900486]
[148.32066345 24.15479469]
[141.15138245 37.33058548]
[142.57183838 54.79028320]
[126.86054993 64.32832336]
[119.97839355 77.65634155]
[113.09624481 90.98435974]
[127.19521332 85.86389160]
[138.01657104 96.25129700]
[133.47711182 110.54791260]
[118.64453888 112.78955078]
[131.05987549 121.20735931]
[143.47520447 129.62516785]
[155.89054871 138.04296875]
[168.30587769 146.46076965]
[181.14607239 144.80477905]
[191.32838440 152.13212585]
[193.68023682 164.04510498]
[205.91029358 172.72990417]
[218.14035034 181.41470337]
[230.37039185 190.09950256]
[242.60044861 198.78430176]
[254.83050537 207.46910095]
[267.06054688 216.15391541]
[279.29061890 224.83871460]
[291.52066040 233.52351379]
[307.93563843 237.76435852]
[308.40466309 254.71182251]
[292.24932861 259.85403442]
[282.83587646 245.75357056]
[270.60580444 237.06877136]
[258.37576294 228.38395691]
[246.14570618 219.69915771]
[233.91564941 211.01435852]
[221.68559265 202.32955933]
[209.45553589 193.64476013]
[197.22549438 184.95996094]
[184.99543762 176.27514648]
[167.49069214 175.60989380]
[159.88807678 158.87611389]
[147.47273254 150.45831299]
[135.05740356 142.04049683]
[122.64206696 133.62269592]
[110.22673035 125.20488739]
[107.81079865 140.00904846]
[96.35047150 149.68690491]
[81.35079193 149.58963013]
[70.01693726 139.76396179]
[67.79320526 124.92971802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[65 102]
[66 101]
[67 100]
[70 98]
[71 97]
[72 96]
[106 139]
[107 138]
[108 137]
[109 136]
[110 135]
[113 133]
[114 132]
[115 131]
[116 130]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% Start Annotations
1 30 9  0 0.9 0.2 omark
32 144 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
