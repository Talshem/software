%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.6.4
%%CreationDate: Wed Oct  2 13:55:27 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def

%%EndProlog

% data start here
/cutpoint 30 def
/sequence { (\
AAAAAAAAAAAAAAAAAAAAAAAAAAAAGG GGGCCUUUUUUUUUUUUUUUUUUUUUUUUUUUUGCCAGAGGAGAAAAAAAAUGAAAAAAAAAAACCUGGCGGCAGCGCAAAAGCGUAAAGGAGAAGAACUUUUCACUGGAGUU\
) } def
/len { sequence length } bind def

/coor [
[69.01479340 137.53004456]
[54.21239471 139.95677185]
[39.40999985 142.38349915]
[24.60759926 144.81024170]
[9.80520248 147.23696899]
[-4.99719572 149.66369629]
[-19.79959297 152.09042358]
[-34.60198975 154.51715088]
[-49.40438843 156.94387817]
[-64.20678711 159.37062073]
[-79.00918579 161.79734802]
[-93.81158447 164.22407532]
[-108.61398315 166.65080261]
[-123.41638184 169.07752991]
[-138.21878052 171.50425720]
[-153.02117920 173.93099976]
[-167.82357788 176.35772705]
[-182.62597656 178.78445435]
[-197.42835999 181.21118164]
[-212.23075867 183.63790894]
[-227.03315735 186.06463623]
[-241.83555603 188.49137878]
[-256.63796997 190.91810608]
[-271.44036865 193.34483337]
[-286.24276733 195.77156067]
[-301.04516602 198.19828796]
[-315.84756470 200.62503052]
[-330.64993286 203.05175781]
[-345.45233154 205.47848511]
[-360.25473022 207.90521240]
[-372.59350586 218.70741272]
[-388.02853394 213.16740417]
[-390.68161011 196.98429871]
[-377.82348633 186.80586243]
[-362.68148804 193.10281372]
[-347.87908936 190.67608643]
[-333.07669067 188.24935913]
[-318.27429199 185.82263184]
[-303.47189331 183.39588928]
[-288.66949463 180.96916199]
[-273.86709595 178.54243469]
[-259.06469727 176.11570740]
[-244.26228333 173.68898010]
[-229.45989990 171.26225281]
[-214.65750122 168.83551025]
[-199.85510254 166.40878296]
[-185.05270386 163.98205566]
[-170.25030518 161.55532837]
[-155.44790649 159.12860107]
[-140.64550781 156.70185852]
[-125.84310913 154.27513123]
[-111.04071045 151.84840393]
[-96.23831177 149.42167664]
[-81.43591309 146.99494934]
[-66.63351440 144.56822205]
[-51.83111954 142.14147949]
[-37.02872086 139.71475220]
[-22.22632408 137.28802490]
[-7.42392540 134.86129761]
[7.37847233 132.43457031]
[22.18087006 130.00784302]
[36.98326874 127.58110809]
[51.78566742 125.15437317]
[66.58806610 122.72764587]
[89.93849182 61.62841415]
[96.53028107 48.15442657]
[103.12207031 34.68044281]
[109.71385956 21.20645523]
[116.30564880 7.73246956]
[104.51267242 -1.63448548]
[95.00938416 -13.31787300]
[88.24026489 -26.77123833]
[84.52191162 -41.36534500]
[84.02825165 -56.41759872]
[86.78236389 -71.22398376]
[92.65544128 -85.09196472]
[101.37278748 -97.37293243]
[112.52667236 -107.49246216]
[125.59540558 -114.97725677]
[139.96775818 -119.47723389]
[154.97148132 -120.78192902]
[169.90484619 -118.83031464]
[184.06936646 -113.71366882]
[196.80258179 -105.67131042]
[207.50889587 -95.07939148]
[215.68759155 -82.43331909]
[220.95610046 -68.32456970]
[223.06802368 -53.41303253]
[221.92459106 -38.39615631]
[217.57926941 -23.97629929]
[210.23530579 -10.82790947]
[200.23617554 0.43404210]
[188.04957581 9.28281307]
[174.24546814 15.30452919]
[159.46952820 18.21754646]
[144.41284180 17.88561440]
[129.77963257 14.32425976]
[123.18784332 27.79824638]
[116.59605408 41.27223206]
[110.00426483 54.74621964]
[103.41247559 68.22020721]
[106.99711609 74.80809784]
[120.17301178 67.63902283]
[127.34188843 80.81503296]
[114.16638947 87.98388672]
[117.75102997 94.57178497]
[132.64465332 96.35501099]
[147.53828430 98.13824463]
[162.43191528 99.92147827]
[177.28692627 92.97450256]
[190.57391357 102.58638000]
[188.62434387 118.86923218]
[173.44378662 125.07265472]
[160.64868164 114.81510162]
[145.75505066 113.03186798]
[130.86143494 111.24864197]
[115.96780396 109.46540833]
[112.38316345 116.05330658]
[105.21388245 129.22909546]
[101.62924194 135.81698608]
[111.21562195 147.35394287]
[120.92641449 158.78637695]
[130.76048279 170.11294556]
[140.59455872 181.43949890]
[150.42863464 192.76606750]
[160.26269531 204.09263611]
[175.93321228 208.92658997]
[179.31784058 224.97265625]
[166.93476868 235.72401428]
[151.52264404 230.12059021]
[148.93612671 213.92669678]
[139.10206604 202.60014343]
[129.26799011 191.27357483]
[119.43392181 179.94700623]
[109.59985352 168.62045288]
[102.78913879 165.60948181]
[99.67866516 156.94032288]
[90.09228516 145.40336609]
[95.61935425 159.34796143]
[91.45404053 173.75802612]
[79.33946991 182.60321045]
[64.34538269 182.18191528]
[52.74657440 172.67047119]
[49.39694595 158.04925537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[8 57]
[9 56]
[10 55]
[11 54]
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 47]
[19 46]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[106 117]
[107 116]
[108 115]
[109 114]
[120 138]
[121 137]
[122 135]
[123 134]
[124 133]
[125 132]
[126 131]
] def

init

% Start Annotations
1 30 9  0 0.9 0.2 omark
32 144 9  1 0.1 0.2 omark

% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
